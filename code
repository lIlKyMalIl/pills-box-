/*
Σε αυτή την άσκηση πρέπει να δημιουργήσετε ένα σύστημα που θα ενσωματωθεί σε ένα κουτί με φάρμακα για ηλικιωμένους που ξεχνούν πότε
πρέπει να τα πάρουν.
 
Εδώ θα φτιάξουμε μια προσομείωση του παραπάνω συστήματος, ώστε μετά να μπορείτε να το δημιουργήσετε με πραγματικά υλικά.
 
Θα χρησιμοποιηθούν κάποιοι αισθητήρες οι οποίοι ανιχνεύουν κλήση, που θα τους λέμε tilt sensors. Τα tilt sensors εάν κουνηθούν αλλάζουν την
τιμή τους. Εάν είναι 0 σε 1 και εάν είναι 1 σε 0. Δεν μπορούμε να γνωρίζουμε εκ των προτέρων τι τιμή έχουν σε κάθε θέση, άρα πρέπει απλά να
κοιτάμε εάν η τιμή τους έχει αλλάξει ανάμεσα σε δύο χρονικές στιγμές.
 
Ένα άλλο σημαντικό στοιχείο αυτής της άσκησης, είναι ότι δε θα χρησιμοποιήσουμε delays ώστε να εκτελέσουμε κάποιες εντολές σε μια
συγκεκριμένη συχνότητα. Αν θυμάστε, πριν αναβοσβήναμε ένα λαμπάκι κάθε ένα δευτερόλεπτο, ανάβοντας το λαμπάκι, σταματώντας την εκτέλεση
του προγράμματος για 1 δευτερόλεπτο, σβήνοντας το λαμπάκι και σταματώντας την εκτέλεση του προγράμματος για ένα δευτερόλεπτο.
Επειδή σε αυτή την περίπτωση δεν έχουμε την πολυτέλεια να σταματήσουμε την εκτέλεση του προγράμματος (διότι πρέπει να κοιτάμε ανά πάσα
στιγμή εάν έχει ανοίξει το καπάκι) θα χρησιμοποιήσουμε μια διαφορετική και πολύ χρήσιμη τακτική. Θα ελέγχουμε σε ένα if, εάν έχει περάσει
ένας συγκεκριμένος χρόνος για παράδειγμα 5 δευτερόλεπτα, από την τελευταία φορά που μπήκαμε στο συγκεκριμένο if. Για αυτό το σκοπό, θα
χρησιμοποιήσουμε την εντολή millis() η οποία επιστρέφει τα πόσα μιλισεκόντ έχουν περάσει απ' τη στιγμή που ξεκίνησε τη λειτουργία του
το Arduino.
 
Για παράδειγμα, μελετήστε τον παρακάτω κώδικα:
 
 void loop(){
   unsigned long now = millis(); //αποθηκεύει στη μεταβλητή now το πόσα μιλλισεκοντ έχουν περάσει απ' την έναρξη λειτουργίας του arduino
   if (now >= lastTime + 5000){ //ΑΝ τώρα έχουν περάσει περισσότερα από 5000 μιλλισεκόντ σε σχέση με την προηγούμενη φορά, τότε μπες στο if
     //κάνε κάτι
   	 lastTime = now; //η τωρινή στιγμή αποθηκεύεται ως "η τελευταία φορά", ώστε η επόμενη είσοδος στο if να γίνει 5000 μιλισεκόντ αργότερα
   }
 }
 
Ο κώδικας που βρίσκεται μέσα στο παραπάνω if, εκτελείται κάθε 5 δευτερόλεπτα. Μην ξεχνάτε να αποθηκεύσετε πότε έγινε η τελευταία είσοδος στο if,
διότι εάν δεν το κάνετε, τότε ο κώδικας θα εκτελείται συνεχώς μετά τα πρώτα 5 δευτερόλεπτα. Άρα θα πρέπει να σκεφτούμε ως εξής:
1. Αποθηκεύουμε την τωρινή χρονική στιγμή (π.χ. έχουν περάσει 10 δευτερόλεπτα απ' την εκκίνηση του προγράμματος)
2. Ελέγχουμε εάν η τωρινή χρονική στιγμή, είναι μεγαλύτερη η ίση σε σχέση με την τελευταία χρονική στιγμή που μπήκαμε στο if ΣΥΝ τη συχνότητα.
 Εάν η τελευταία φορά που μπήκαμε στο if ήταν στα 8 δευτερόλεπτα, σημαίνει ότι δεν είναι ο καιρός για να ξαναμπούμε. Διότι το 10 ΔΕΝ είναι
 μεγαλύτερο ή ίσο σε σχέση με το 8 δευτερόλεπτα (όπου ήταν η τελευταία είσοδος) ΣΥΝ 5, το οποίο είναι η συχνότητά μας.
3. Εκτελούμε τον κώδικα.
4. Αποθηκεύουμε την τωρινή χρονική στιγμή, στη μεταβλητή που αντιπροσωπεύει την "τελευταία φορά" που μπήκαμε στο if, ώστε η επόμενη φορά που
θα ξαναμπούμε να είναι 5 δευτερόλεπτα αργότερα.

Συνοψίζοντας, η συνολική λογική του προγράμματος είναι η εξής:

1. Κάθε ένα συγκεκριμένο χρονικό διάστημα (INTERVAL) άνοιξε το λαμπάκι στο καπάκι του οποίου είναι η σειρά να ανοίξει.
2. Διάβασε την τιμή που δίνει το tilt sensor στο συγκεκριμένο καπάκι
3. Ξεκίνα να χτυπάς τον βομβητή
4. Εάν (σε οποιαδήποτε στιγμή) ο βομβητής χτυπάει, διάβασε την είσοδο του tilt sensor που βρίσκεται στο καπάκι που πρέπει να ανοίξει
5. Εάν η τιμή που διαβάσαμε τώρα, είναι διαφορετική της τιμής που είχαμε διαβάσει όταν ξεκινήσαμε να χτυπάμε το βομβητή, τότε
  σημαίνει πως το καπάκι έχει ανοίξει και άρα πρέπει να σταματήσουμε να χτυπάμε το βομβητή και να κλείσουμε οποιοδήποτε λαμπάκι είναι ανοιχτό.
6. Εάν ο χρήστης ανοίξει το καπάκι, μετά ορίζουμε το επόμενο καπάκι, ως το κατάλληλο που πρέπει να ανοιχθεί όταν έρθει η ώρα.

Δώστε ΜΕΓΑΛΗ ΠΡΟΣΟΧΗ, στην στοίχιση που βρίσκονται τα σχόλια, διότι αυτά υποδηλώνουν τα μπλοκ κώδικα που μπαίνουν μέσα στα if. ΜΗΝ σβήσετε
τα σχόλια και ακολουθείτε πιστά τις οδηγίες τους. Σε κάθε κενή γραμμή ανάμεσα τα σχόλια, μπαίνει και μια γραμμή κώδικα. Με λίγα λόγια, στο
τέλος ΔΕΝ πρέπει να υπάρχουν κενές γραμμές ανάμεσα στα σχόλια.
*/


/* ΜΗΝ ΑΛΛΑΞΕΤΕ ΤΟΝ ΠΑΡΑΚΑΤΩ ΚΩΔΙΚΑ */
const int buzzerPin = 10; //το pin στο οποίο είναι συνδεδεμένος ο βομβητής (buzzer)
const int tiltOnePin = 8; //το pin στο οποίο είναι συνδεδεμένο το πρώτο tilt sensor (το πρώτο "καπάκι")
const int ledOnePin = 9; //το pin στο οποίο είναι συνδεδεμένο το λαμπάκι για το πρώτο καπάκι
const int tiltTwoPin = 6; //το pin στο οποίο είναι συνδεδεμένο το δεύτερο tilt sensor
const int ledTwoPin = 7; //το pin στο οποίο είναι συνδεδεμένο το λαμπάκι για το δεύτερο καπάκι
const int tiltThreePin = 4; //το pin στο οποίο είναι συνδεδεμένο το τρίτο tilt sensor
const int ledThreePin = 5; //το pin στο οποίο είναι συνδεδεμένο το λαμπάκι για το τρίτο καπάκι

const unsigned long INTERVAL = 5000; //Ο χρόνος που μεσολαβεί μεταξύ τη λήψη δύο δοσολογιών των φαρμάκων
unsigned long previousTime = 0; //Η χρονική στιγμή όπου έγινε η λήψη του προηγούμενου φαρμάκου
int tiltSensorState = 0; //μεταβλητή που αντιπροσωπεύει τη θέση που βρίσκεται το tilt sensor που μας ενδιαφέρει εκείνη τη στιγμή
boolean buzzerRinging = false; //μεταβλητή που αντιπροσωπεύει εάν ο βομβητής χτυπάει ή όχι

int kapaki = 1; //Το καπάκι που πρέπει να ανοιχτεί από το χρήστη

void setup() {
  //Θέσε τα pin ως εξόδους και εισόδους αντίστοιχα
  pinMode(tiltOnePin, INPUT);
  pinMode(ledOnePin, OUTPUT);
  pinMode(tiltTwoPin, INPUT);
  pinMode(ledTwoPin, OUTPUT);
  pinMode(tiltThreePin, INPUT);
  pinMode(ledThreePin, OUTPUT);
  tone(buzzerPin, 1000, 20); //ένας σύντομος χαρακτηριστικός ήχος ώστε να ξέρουμε πότε ξεκινάει το πρ��γραμμά μας
}
/*--------------------- */

void loop() {
  //Αποθήκευσε την τωρινή χρονική στιγμή (σε μιλλισεκόντ) στη μεταβλητή με όνομα currentTime τύπου unsigned long 
unsigned long currentTime = millis();
  //ΑΝ το currentTime είναι ΜΕΓΑΛΥΤΕΡΟ Ή ΊΣΟ του previousTime + INTERVAL, είναι ώρα να ανοίξουμε κάποιο καπάκι
  if (currentTime >= previousTime + INTERVAL) {
    //ΑΝ η μεταβλητή kapaki είναι ίση με το 1 (δλδ εάν πρέπει να ανοίξουμε το πρώτο καπάκι)
    if (kapaki == 1) {
      //Άναψε το πρώτο λαμπάκι στο pin ledOnePin, ώστε να δείξεις στο χρήστη ποιο καπάκι πρέπει να ανοιξει
  digitalWrite (ledOnePin, HIGH);
      //ΔΙΑΒΑΣΕ (με την εντολή digitalRead) το σήμα από τον ακροδέκτη tiltOnePin και αποθήκευσέ το στη μεταβλητή tiltSensorState
  tiltSensorState = digitalRead(tiltOnePin);
    }
    //ΑΝ η μεταβλητή kapaki είναι ίση με το 2 (δλδ εάν πρέπει να ανοίξουμε το δεύτερο καπάκι)
    if (kapaki == 2) {
      //Άναψε το δεύτερο λαμπάκι στο pin ledTwoPin, ώστε να δείξεις στο χρήστη ποιο καπάκι πρέπει να ανοιξει
  digitalWrite (ledTwoPin, HIGH);
      //ΔΙΑΒΑΣΕ (με την εντολή digitalRead) το σήμα από τον ακροδέκτη tiltTwoPin και αποθήκευσέ το στη μεταβλητή tiltSensorState
  tiltSensorState = digitalRead(tiltTwoPin);
    }
    //ΑΝ η μεταβλητή kapaki είναι ίση με το 3 (δλδ εάν πρέπει να ανοίξουμε το τρίτο καπάκι)
    if (kapaki == 3) {
      //Άναψε το τρίτο λαμπάκι στο pin ledThreePin, ώστε να δείξεις στο χρήστη ποιο καπάκι πρέπει να ανοιξει
  digitalWrite (ledThreePin, HIGH);
      //ΔΙΑΒΑΣΕ (με την εντολή digitalRead) το σήμα από τον ακροδέκτη tiltThreePin και αποθήκευσέ το στη μεταβλητή tiltSensorState
  tiltSensorState = digitalRead(tiltThreePin);
    }
    /* ΜΗΝ ΑΛΛΑΞΕΤΕ ΤΗΝ ΠΑΡΑΚΑΤΩ ΓΡΑΜΜΗ ΚΩΔΙΚΑ */
    //Ξεκίνα να παράγεις ήχο συχνότητας 1000 Hz με τον βομβητή στον ακροδέκτη buzzerPin
    tone(buzzerPin,1000);
    /* ----- */
    //αποθήκευσε στη μεταβλητή buzzerRinging την τιμή true, ώστε να δείξουμε ότι ο βομβητής έχει αρχίσει να χτυπάει, άρα είναι ώρα για τον χρήστη να ανοίξει το καπάκι
  buzzerRinging = true;
    //Αποθήκευσε στη μεταβλητή previousTime τη μεταβλητή currentTime
  previousTime = currentTime;
  }
  //ΑΝ η μεταβλτή buzzerRinging είναι true, δηλαδή χτυπάει ο βομβητής (πρέπει να αρχίσουμε να ελέγχουμε κάποιος έχει ανοίξει τα καπάκια)
  if (buzzerRinging == true) {
    //Αποθήκευσε σε μια (καινούρια/τοπική) μεταβλητή τύπου int με όνομα currentState την τιμή 0 (δηλαδή αρχικοποιούμε μια μεταβλητή)
  int currentState = 0;
    //ΑΝ η μεταβλητή kapaki ισούται με 1
    if (kapaki == 1) {
      //ΔΙΑΒΑΣΕ (με την εντολή digitalRead) το σήμα από τον ακροδέκτη tiltOnePin και αποθήκευσέ το στη μεταβλητή currentState
  currentState = digitalRead(tiltOnePin);
    }
    //ΑΝ η μεταβλητή kapaki ισούται με 2
    if (kapaki == 2) {
      //ΔΙΑΒΑΣΕ (με την εντολή digitalRead) το σήμα από τον ακροδέκτη tiltTwoPin και αποθήκευσέ το στη μεταβλητή currentState
    currentState = digitalRead(tiltTwoPin);
    }
    //ΑΝ η μεταβλητή kapaki ισούται με 2
    if (kapaki == 3) {
      //ΔΙΑΒΑΣΕ (με την εντολή digitalRead) το σήμα από τον ακροδέκτη tiltThreePin και αποθήκευσέ το στη μεταβλητή currentState
    currentState = digitalRead(tiltThreePin);
    }
    //ΑΝ η μεταβλητή currentState είναι ΔΙΑΦΟΡΕΤΙΚΗ (!=) από τη μεταβλητή tiltSensorState (δηλαδή εάν το tilt sensor έχει κουνηθεί απ' τη στιγμή που άρχισε ο βομβητής να χτυπάει)
    if (currentState != tiltSensorState) { 
      //Κλείσε το λαμπάκι στον ακροδέκτη ledOnePin
    digitalWrite (ledOnePin, LOW);
      //Κλείσε το λαμπάκι στον ακροδέκτη ledTwoPin
    digitalWrite (ledTwoPin, LOW);
      //Κλείσε το λαμπάκι στον ακροδέκτη ledThreePin
    digitalWrite (ledThreePin, LOW);
      /* ΜΗΝ ΑΛΛΑΞΕΤΕ ΤΟΝ ΠΑΡΑΚΑΤΩ ΚΩΔΙΚΑ */
      //Σταμάτα τον ήχο στο βομβητή, αφού το καπάκι έχει ανοίξει
      noTone(buzzerPin);
      /* ----- */
      //Αποθήκευσε στη μεταβλητή buzzerRinging την τιμή false, ώστε να δείξουμε ότι ο βομβητής έχει σταματήσει να χτυπάει, άρα ο χρήστης έχει ανοίξει το καπάκι
    buzzerRinging = false;
      //Αύξησε την τιμή της μεταβλητής kapaki κατά ένα. Δηλαδή η μεταβλητή kapaki να γίνει ότι ήταν πριν συν 1.
    kapaki = kapaki + 1;
      //ΑΝ το kapaki είναι μεγαλύτερο από το 3 (προς το παρόν έχουμε μόνο τρία καπάκια)
      if (kapaki > 3) {
        //Αποθήκευσε στη μεταβλητή kapaki την τιμή 1 (δηλαδή να ξεκινήσει από την αρχή)
    kapaki = 1;
      }
    }
  }
}
